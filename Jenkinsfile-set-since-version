node {

  stage("set_version") {
    println "NXRM version: ${params.nxrm_version}"
    println "release branch: ${params.release_branch}"
    println "tracking_branch: ${params.tracking_branch}"

    def parentDirectory = new File(".")

    def setVersionInNewFile = {
      println "zzzzzzzzzz ${it}"
    }

      parentDirectory.traverse(
      type: groovy.io.FileType.FILES,
      visit: setVersionInNewFile)


    sh "git checkout ${params.release_branch}"

    sh "git checkout -b jenkins_work"

    def versionUpdater = load "update-since-version.groovy"
    if (!versionUpdater.updateVersion(params.nxrm_version)) {
      throw new RuntimeException("Version update failed")
    }

    sh "git commit -m \"updated source version to ${params.nxrm_version}\""
  }

  stage ("push_release") {
    commitAndPushToExistingBranch(params.release_branch)
  }

  stage ("push_tracking") {
    commitAndPushToExistingBranch(params.tracking_branch)
  }
}

void commitAndPushToExistingBranch(String branch) {
  println "going to push changes to ${branch}"

  sh "git checkout ${branch}"
  sh "git pull"
  sh "git cherry-pick jenkins_work"

  try {
    "sh git push"
  } catch (Exception e) {
    "sh git reset --hard"
    "sh git pull"
    "sh git cherry-pick jenkins_work"
    "sh git push"
  }

  println "push to ${params.release_branch}' - OK"
}