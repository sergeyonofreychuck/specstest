library('jenkins-shared')

node {  
  stage("prepare_sources") {

    println "NXRM version: ${params.nxrm_version}"
    println "release branch: ${params.release_branch}"
    println "tracking_branch: ${params.tracking_branch}"

    deleteDir()
    checkout scm

    runSafely "git checkout ${params.release_branch}"

    runSafely "git checkout -b jenkins_work"
  }

  stage("set_version") {
    runGroovy("update-since-version.groovy", params.nxrm_version)
  }

  stage("git_publish") {
    sshagent (credentials: sonatypeZionCredentialsId()) {

      runSafely "git config user.email 'sonatype-zion@sonatype.com'"
      runSafely "git config user.name 'Sonatype Zion'"

      runSafely "git add ."

      println "commit to \"jenkins_work\" branch"

      runSafely "git commit -m \"updated new sources version to ${params.nxrm_version}\""

      commitAndPushToExistingBranch(params.release_branch)

      commitAndPushToExistingBranch(params.tracking_branch)
    }
  }
}

void commitAndPushToExistingBranch(String branch) {
  println "going to push changes to ${branch}"

  runSafely "git checkout ${branch}"
  runSafely "git pull"
  runSafely "git cherry-pick jenkins_work"

  try {
    runSafely "git push"
  } catch (Exception e) {
    println "push to ${branch}' failed, trying the secont attempt"

    runSafely "git reset --hard"
    runSafely "git pull"
    runSafely "git cherry-pick jenkins_work"
    runSafely "git push"
  }

  println "push to ${branch}' - OK"
}